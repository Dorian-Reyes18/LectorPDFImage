from flask import Flask, render_template, request, redirect, flash, url_for
import os
from pdf_reader import read_pdf
from PyPDF2 import PdfReader
from werkzeug.utils import secure_filename

app = Flask(__name__, static_folder="static")

# Definir la carpeta de carga de archivos PDF
UPLOAD_FOLDER = "static/pdf_files"
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Definir las extensiones de archivo permitidas
ALLOWED_EXTENSIONS = {"pdf"}


# Función para verificar la extensión del archivo
def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS


# Ruta para la página principal
@app.route("/")
def index():
    # Obtener la lista de archivos PDF en la carpeta pdf_files
    pdf_files = [file for file in os.listdir(UPLOAD_FOLDER) if file.endswith(".pdf")]
    return render_template("index.html", pdf_files=pdf_files)


# Ruta para cargar el documento PDF
@app.route("/upload_pdf", methods=["POST"])
def upload_pdf():
    if "pdf_file" not in request.files:
        flash("No se ha seleccionado ningún archivo PDF", "error")
        return redirect(url_for("index"))

    pdf_file = request.files["pdf_file"]

    if pdf_file.filename == "":
        flash("No se ha seleccionado ningún archivo PDF", "error")
        return redirect(url_for("index"))

    if pdf_file and allowed_file(pdf_file.filename):
        filename = secure_filename(pdf_file.filename)
        pdf_path = os.path.join(app.config["UPLOAD_FOLDER"], filename)
        pdf_file.save(pdf_path)
        flash("El archivo PDF se ha cargado correctamente", "success")
        return redirect(url_for("dashboard", pdf_file=filename))

    flash("El archivo seleccionado no es un PDF válido", "error")
    return redirect(url_for("index"))


# Ruta para el dashboard (preview del PDF seleccionado)
@app.route("/dashboard/<pdf_file>")
def dashboard(pdf_file):
    pdf_path = os.path.join(app.static_folder, "pdf_files", pdf_file)
    if os.path.exists(pdf_path):
        # Obtener el número de páginas del PDF
        with open(pdf_path, "rb") as f:
            pdf_reader = PdfReader(f)
            num_pages = len(pdf_reader.pages)
        return render_template("dashboard.html", pdf_file=pdf_file, num_pages=num_pages)
    else:
        flash("El PDF seleccionado no existe", "error")
        return redirect(url_for("index"))


# Ruta para la búsqueda por texto con paginación
@app.route("/search", methods=["POST"])
def search():
    query = request.form["query"]
    pdf_file = request.form["pdf_file"]
    pdf_path = os.path.join(app.config["UPLOAD_FOLDER"], pdf_file)

    # Obtener el rango de páginas del formulario
    start_page = int(request.form["start_page"])
    end_page = int(request.form["end_page"])

    # Extraer texto del PDF con EasyOCR
    page_texts = read_pdf(pdf_path, start_page, end_page)

    # Resultados de búsqueda
    results = []
    for i, text in enumerate(page_texts):
        if query in text:
            results.append(
                i + start_page
            )  # Número de página, comenzando desde start_page

    # Calcular el total de páginas
    total_pages = (len(results) + end_page - start_page) // (end_page - start_page + 1)

    # Página actual
    page_number = int(request.args.get("page", start_page))

    # Calcular el rango de resultados para la página actual
    start_index = (page_number - start_page) * (end_page - start_page + 1)
    end_index = min(start_index + (end_page - start_page + 1), len(results))

    # Obtener los resultados para la página actual
    current_results = results[start_index:end_index]

    # Obtener información de las páginas con resultados para la página actual
    pages_with_results = []
    for result in current_results:
        page_number = result
        page_text = page_texts[page_number - start_page]
        # Verificar si la página ya está en la lista
        if page_number not in [page["page_number"] for page in pages_with_results]:
            pages_with_results.append(
                {
                    "page_number": page_number,
                    "text": page_text,
                    "count": page_text.lower().count(query.lower()),
                }
            )

    return render_template(
        "search_results.html",
        query=query,
        pages_with_results=pages_with_results,
        pdf_file=pdf_file,
        total_pages=total_pages,
        current_page=page_number,
    )


if __name__ == "__main__":
    app.secret_key = "super_secret_key"  # Clave secreta para mensajes flash
    app.run(debug=False)




pdf_reader.py:---------------------------------------------------------

import fitz  # PyMuPDF
from PIL import Image, ImageFilter, ImageOps
from io import BytesIO
import easyocr
import concurrent.futures

# Instanciar el objeto EasyOCR fuera de la función process_image para reutilizarlo
reader = easyocr.Reader(["es"])

# Función para preprocesar una imagen antes de OCR
def preprocess_image(image):
    # Aumentar el contraste
    image = ImageOps.autocontrast(image)

    # Aplicar filtro de nitidez
    image = image.filter(ImageFilter.SHARPEN)

    # Aplicar inversión de color
    image = ImageOps.invert(image)

    return image

# Función para procesar una imagen y extraer el texto
def process_image(image_bytes):
    try:
        image = Image.open(BytesIO(image_bytes))
        preprocessed_image = preprocess_image(image)
        buffer = BytesIO()
        preprocessed_image.save(buffer, format="JPEG")
        buffer.seek(0)
        image_bytes = buffer.read()
        results = reader.readtext(image_bytes)
        return " ".join([result[1] for result in results])
    except Exception as e:
        print("Error al procesar la imagen:", e)
        return ""

# Función para leer el texto de las imágenes en un rango de páginas del PDF
def read_pdf(pdf_path, start_page, end_page):
    page_texts = []

    try:
        pdf_document = fitz.open(pdf_path)
        executor = concurrent.futures.ThreadPoolExecutor()

        for page_number in range(start_page - 1, min(end_page, len(pdf_document))):
            page = pdf_document.load_page(page_number)
            page_text = ""

            futures = [executor.submit(process_image, pdf_document.extract_image(img[0])["image"]) for img in page.get_images(full=True) if pdf_document.extract_image(img[0])["image"]]

            for future in concurrent.futures.as_completed(futures):
                page_text += future.result()

            page_texts.append(page_text)

        pdf_document.close()
    except Exception as e:
        print("Error al procesar el PDF:", e)

    return page_texts

# Ejemplo de uso:
pdf_path = "ruta/al/pdf.pdf"
start_page = 1
end_page = 3
texts = read_pdf(pdf_path, start_page, end_page)


base.html:--------------------------------------------------------------
<!-- templates/base.html -->

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF Text Extraction App</title>
    <link rel="stylesheet" href="../static/css/app.main.css" />
    <!-- Agregar otros enlaces a archivos CSS aquí -->
  </head>
  <body>
    <!-- Barra de navegación -->
    <nav class="navbar">
      <ul class="navbar-nav">
        <li class="nav-item">
          <a class="nav-link" href="{{ url_for('index') }}">Inicio</a>
        </li>
        {% if 'dashboard' in request.path or 'search' in request.path %}
        <li
          class="nav-item {% if 'dashboard' in request.path or 'search' in request.path %}active{% endif %}"
        >
          <a class="nav-link disabled" href="#">
            {% if 'dashboard' in request.path %} Dashboard {% elif 'search' in
            request.path %} Results {% endif %}
          </a>
        </li>
        {% endif %}
      </ul>
    </nav>

    <!-- Contenido de la página -->
    {% block content %} {% endblock %}

    <!-- Scripts -->
    <script src="{{ url_for('static', filename='js/jquery.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/bootstrap.min.js') }}"></script>
    <!-- Agregar otros enlaces a archivos JavaScript aquí -->
  </body>
</html>


index.html:--------------------------------------------------

<link rel="stylesheet" href="../static/css/app.main.css" />
{% block content %}
<div class="container index-background">
  <div class="card">
    <div class="head">
      <h1>PDFs Disponibles</h1>
    </div>
    <h2 class="tit">Seleccione uno</h2>
    <div class="body">
      <ul>
        {% for pdf_file in pdf_files %}
        <li>
          <img src="../static/img/PDF.svg" class="pdf" />
          <a href="{{ url_for('dashboard', pdf_file=pdf_file) }}"
            >{{ pdf_file }}</a
          >
        </li>
        {% endfor %}
      </ul>
    </div>
    <div class="foot">
      <h2 class="marca">@By_Yan_18</h2>
    </div>
  </div>
</div>
{% endblock %}


search_result.html:-------------------------------------------

{% extends "base.html" %} {% block content %}
<h1>
  Búsqueda de resultados para la palabra "<span
    class="palabra"
    id="search-query"
  ></span
  >"
</h1>
<ul id="search-results" class="search-results">
  <!-- Aquí se agregarán los resultados -->
  {% set seen_pages = [] %} {% for result in pages_with_results %} {% if
  result.page_number not in seen_pages %} {% set _ =
  seen_pages.append(result.page_number) %}
  <li class="resultpage">
    <div class="info">
      <div class="match">
        Página {{ result.page_number }} -
        <span style="color: #ff72a5">{{ result.count }} coincidencias</span>
      </div>
      <div class="result">{{ result.text | safe }}</div>
      <!-- Cambio aquí -->
      <a
        class="pagekey"
        href="/dashboard/{{ pdf_file }}#page={{ result.page_number }}"
        >Ir al Dashboard</a
      >
    </div>
  </li>
  {% endif %} {% endfor %}
</ul>

<!-- Agregar campos ocultos para start_page y end_page -->
<form id="search-form" action="{{ url_for('search') }}" method="POST">
  <input type="hidden" name="query" value="{{ query }}" />
  <input type="hidden" name="pdf_file" value="{{ pdf_file }}" />
  <input type="hidden" name="start_page" value="{{ start_page }}" />
  <input type="hidden" name="end_page" value="{{ end_page }}" />
</form>

{% include "js/search.result.js.html" %} {% endblock %}


es un proyecto hecho con python y con flask

mi estructura de carpetas es este:
>app
 >static
   >fonts
   >img
   >css
     app.main.css
     app.main.css.map
   >pdf_files
     5_6183737717705148848.pdf
     Example-pdf.pdf
     McCracken_protesis_parcial_removi...
   >sass
     _base.scss
     _indexscss
     _search.results.scss
     main.scss
   >templates
     >js
       dj main.js.html
       dj search.result.js.html
     base.html
     dj dashboard.html
     dj index.html
     dj search_results.html
   _init_.py
   app.py
   pdf_reader.py
 README.md